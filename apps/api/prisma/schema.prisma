// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}
  
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INVITED
  SUSPENDED
  DELETED
}

model Role {
  id String @id @default(cuid())
  name String @unique
  users User[]
}

model User {
  id  String @id @default(cuid())
  email String @unique
  emailLower String @unique
  passwordHash String @map("password")
  roleId String
  role Role @relation(fields: [roleId], references: [id])
  status UserStatus @default(ACTIVE)
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]
  verificationTokens VerificationToken[]

}

model Project {
  id String @id @default(cuid())
  name String @unique
  description String?
  createdAt DateTime @default(now())
}

model Session {
  id String @id @default(cuid())
  userId String
  refreshTokenHash String @db.VarChar(255)
  expiresAt DateTime
  revokedAt DateTime?
  revokedByIp String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model VerificationToken {
  id String @id @default(cuid())
  userId String
  purpose String
  tokenHash String @db.VarChar(255)
  expiresAt DateTime
  consumedAt DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

