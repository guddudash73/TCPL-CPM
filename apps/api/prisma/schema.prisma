// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}
  
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INVITED
  SUSPENDED
  DELETED
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum StageStatus {
  NOT_STARTED
  IN_PROGRESS
  HOLD
  DONE
}

enum Unit {
  NOS
  METER
  SQM
  CUM
  KG
  LTR
  HR
  DAY
}

enum Currency {
  INR
  USD
  EUR
}

model Role {
  id String @id @default(cuid())
  name String @unique
  users User[]
  projectMemberships ProjectMember[]
}

model User {
  id  String @id @default(cuid())
  email String
  emailLower String @unique
  passwordHash String @map("password")
  roleId String
  role Role @relation(fields: [roleId], references: [id])
  name String
  status UserStatus @default(ACTIVE)
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]
  verificationTokens VerificationToken[]
  projectMemberships ProjectMember[]

}

model Project {
  id String @id @default(cuid())
  code String @unique
  name String @unique
  description String?
  status ProjectStatus @default(PLANNING)
  startDate DateTime?
  endDate DateTime?
  currency Currency @default(INR)
  budgetRupees BigInt @default(0)
  addressLine1 String?
  addressLine2 String?
  city String?
  state String?
  pincode String?
  country String? @default("IN")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members ProjectMember[]
  stage Stage[]

  @@index([status])
  @@index([country, state])
}

model ProjectMember {
id  String @id @default(cuid())
projectId String
userId String
roleId String
createdAt DateTime @default(now())

project Project @relation(fields: [projectId],references: [id], onDelete: Cascade )
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
role Role @relation(fields: [roleId], references: [id], onDelete: Restrict)

@@unique([projectId, userId])
@@index([userId])
@@index([roleId])
}

model Stage {
  id   String @id @default(cuid())
  projectId String
  parentId String?
  code String
  name String
  status StageStatus @default(NOT_STARTED)
  description String?
  sortOrder Int @default(0)
  plannedStart DateTime?
  plannedEnd DateTime?
  actualStart DateTime?
  actualEnd DateTime?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent Stage? @relation("StageToChildren", fields: [parentId], references: [id], onDelete: SetNull)
  children Stage[] @relation("StageToChildren")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, code])
  @@index([projectId, parentId, sortOrder])
  @@index([status])
}

model Meterial {
  id String @id @default(cuid())
  sku String @unique
  name String 
  unit Unit
  description String?
  active Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([active])
}

model Supplier {
  id String @id @default(cuid())
  code String @unique
  name String
  gstin String?
  email String?
  phone String?
  addressLine1 String?
  addressLine2 String?
  city String?
  state String?
  pincode String?
  country String? @default("IN")
  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([active])


}

model Session {
  id String @id @default(cuid())
  userId String
  refreshTokenHash String @db.VarChar(255)
  expiresAt DateTime
  revokedAt DateTime?
  revokedByIp String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model VerificationToken {
  id String @id @default(cuid())
  userId String
  purpose String
  tokenHash String @db.VarChar(255)
  expiresAt DateTime
  consumedAt DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

